/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.4.2/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'jacoco'
    id 'java'
    id("org.springframework.boot") version "2.6.2"
}

jar {
    manifest {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        attributes(
            'Main-Class': 'SOFT2412.A2.App'
        )
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

task fatJar(type: Jar) {
  manifest {
    attributes 'Main-Class': 'SOFT2412.A2.App'
  }
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
  baseName = 'testJar'
  // archiveClassifier = "all"
  from {
    // configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
  with jar
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:30.1.1-jre'

    // This dependency is used to process JSON-related code
    implementation 'com.googlecode.json-simple:json-simple:1.1.1'

    // build.dependsOn jacocoTestReport
}

application {
    // Define the main class for the application.
    mainClass = 'SOFT2412.A2.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
run {
    standardInput = System.in
}

jacocoTestReport {
     dependsOn test // tests are required to run before generating the report

     afterEvaluate {
         classDirectories.setFrom(files(classDirectories.files.collect {
             fileTree(dir: it, exclude: [
                     "**/App.class",
                     "**/UserInterface.class",
                     "**/ConsoleInputReadTask.class"
             ])
         }))
     }

         }